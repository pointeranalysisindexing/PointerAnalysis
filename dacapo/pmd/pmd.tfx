Array.newInstance;java.lang.String[];java.util.Arrays.copyOf;2760;;
Array.newInstance;sun.security.jca.ProviderConfig[];java.util.Arrays.copyOf;2760;;
Class.forName;dacapo.Benchmark;dacapo.Benchmark.class$;439;;
Class.forName;dacapo.Benchmark;dacapo.TestHarness.class$;60;;
Class.forName;dacapo.TestHarness;dacapo.TestHarness.class$;60;;
Class.forName;dacapo.parser.Config;dacapo.TestHarness.class$;60;;
Class.forName;dacapo.pmd.PmdHarness;dacapo.TestHarness.findClass;414;;
Class.forName;java.io.File;dacapo.TestHarness.class$;60;;
Class.forName;java.lang.String;net.sourceforge.pmd.dfa.report.ReportTree.class$;122;;
Class.forName;java.lang.String;net.sourceforge.pmd.jaxen.AttributeAxisIterator.class$;93;;
Class.forName;java.security.MessageDigestSpi;java.security.Security.getSpiClass;640;;
Class.forName;java.util.CurrencyData;java.util.Currency$1.run;128;;
Class.forName;net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration;net.sourceforge.pmd.RuleViolation.class$;74;;
Class.forName;net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration;net.sourceforge.pmd.RuleViolation.class$;74;;
Class.forName;net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration;net.sourceforge.pmd.ast.ASTMethodDeclaration.class$;32;;
Class.forName;net.sourceforge.pmd.ast.ASTFormalParameter;net.sourceforge.pmd.RuleViolation.class$;74;;
Class.forName;net.sourceforge.pmd.ast.ASTIfStatement;net.sourceforge.pmd.rules.DoubleCheckedLocking.class$;64;;
Class.forName;net.sourceforge.pmd.ast.ASTLocalVariableDeclaration;net.sourceforge.pmd.RuleViolation.class$;74;;
Class.forName;net.sourceforge.pmd.ast.ASTMethodDeclaration;net.sourceforge.pmd.RuleViolation.class$;74;;
Class.forName;net.sourceforge.pmd.ast.ASTMethodDeclarator;net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder.class$;95;;
Class.forName;net.sourceforge.pmd.ast.ASTPackageDeclaration;net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder.class$;95;;
Class.forName;net.sourceforge.pmd.ast.ASTPrimaryExpression;net.sourceforge.pmd.rules.DoubleCheckedLocking.class$;64;;
Class.forName;net.sourceforge.pmd.ast.ASTPrimaryPrefix;net.sourceforge.pmd.rules.UselessOverridingMethod.class$;47;;
Class.forName;net.sourceforge.pmd.ast.ASTResultType;net.sourceforge.pmd.ast.ASTMethodDeclaration.class$;32;;
Class.forName;net.sourceforge.pmd.ast.ASTReturnStatement;net.sourceforge.pmd.rules.DoubleCheckedLocking.class$;64;;
Class.forName;net.sourceforge.pmd.ast.ASTStatement;net.sourceforge.pmd.rules.UselessOverridingMethod.class$;47;;
Class.forName;net.sourceforge.pmd.ast.ASTTypeDeclaration;net.sourceforge.pmd.RuleViolation.class$;74;;
Class.forName;org.apache.xerces.impl.dv.ObjectFactory;org.apache.xerces.impl.dv.ObjectFactory.class$;;;
Class.forName;org.apache.xerces.parsers.ObjectFactory;org.apache.xerces.parsers.ObjectFactory.class$;;;
Class.forName;org.jaxen.saxpath.XPathReader;org.jaxen.saxpath.helpers.XPathReaderFactory.class$;152;;
Class.forName;org.jaxen.saxpath.base.XPathReader;org.jaxen.saxpath.helpers.XPathReaderFactory.createReader;150;;
Class.forName;org.jaxen.saxpath.helpers.XPathReaderFactory;org.jaxen.saxpath.helpers.XPathReaderFactory.class$;152;;
Class.forName;sun.security.provider.SHA;java.security.Provider$Service.getImplClass;1260;;
Class.getDeclaredField;<java.util.CurrencyData: int[] otherCurrenciesDFD>;java.util.Currency$1.run;136;isAccessible=false;
Class.getDeclaredField;<java.util.CurrencyData: int[] scNewCurrenciesDFD>;java.util.Currency$1.run;134;isAccessible=false;
Class.getDeclaredField;<java.util.CurrencyData: int[] scOldCurrenciesDFD>;java.util.Currency$1.run;133;isAccessible=false;
Class.getDeclaredField;<java.util.CurrencyData: java.lang.String mainTable>;java.util.Currency$1.run;129;isAccessible=false;
Class.getDeclaredField;<java.util.CurrencyData: java.lang.String otherCurrencies>;java.util.Currency$1.run;135;isAccessible=false;
Class.getDeclaredField;<java.util.CurrencyData: java.lang.String[] scNewCurrencies>;java.util.Currency$1.run;132;isAccessible=false;
Class.getDeclaredField;<java.util.CurrencyData: java.lang.String[] scOldCurrencies>;java.util.Currency$1.run;131;isAccessible=false;
Class.getDeclaredField;<java.util.CurrencyData: long[] scCutOverTimes>;java.util.Currency$1.run;130;isAccessible=false;
Class.getMethod;<java.lang.String: java.lang.String[] split(java.lang.String)>;net.sourceforge.pmd.dfa.report.ReportTree.addRuleViolation;122;isAccessible=false;
Class.getMethods;net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration;net.sourceforge.pmd.jaxen.AttributeAxisIterator.<init>;51;;
Class.getMethods;net.sourceforge.pmd.ast.ASTClassOrInterfaceType;net.sourceforge.pmd.jaxen.AttributeAxisIterator.<init>;51;;
Class.getMethods;net.sourceforge.pmd.ast.ASTIfStatement;net.sourceforge.pmd.jaxen.AttributeAxisIterator.<init>;51;;
Class.getMethods;net.sourceforge.pmd.ast.ASTInitializer;net.sourceforge.pmd.jaxen.AttributeAxisIterator.<init>;51;;
Class.getMethods;net.sourceforge.pmd.ast.ASTMethodDeclarator;net.sourceforge.pmd.jaxen.AttributeAxisIterator.<init>;51;;
Class.getMethods;net.sourceforge.pmd.ast.ASTName;net.sourceforge.pmd.jaxen.AttributeAxisIterator.<init>;51;;
Class.getMethods;net.sourceforge.pmd.ast.ASTPrimarySuffix;net.sourceforge.pmd.jaxen.AttributeAxisIterator.<init>;51;;
Class.getMethods;net.sourceforge.pmd.ast.ASTResultType;net.sourceforge.pmd.jaxen.AttributeAxisIterator.<init>;51;;
Class.getMethods;net.sourceforge.pmd.ast.ASTVariableDeclaratorId;net.sourceforge.pmd.jaxen.AttributeAxisIterator.<init>;51;;
Class.newInstance;net.sourceforge.pmd.rules.DoubleCheckedLocking;net.sourceforge.pmd.RuleSetFactory.parseInternallyDefinedRuleNode;309;;
Class.newInstance;net.sourceforge.pmd.rules.UnnecessaryConversionTemporary;net.sourceforge.pmd.RuleSetFactory.parseInternallyDefinedRuleNode;309;;
Class.newInstance;net.sourceforge.pmd.rules.UselessOverridingMethod;net.sourceforge.pmd.RuleSetFactory.parseInternallyDefinedRuleNode;309;;
Class.newInstance;net.sourceforge.pmd.rules.XPathRule;net.sourceforge.pmd.RuleSetFactory.parseInternallyDefinedRuleNode;309;;
Class.newInstance;org.apache.xerces.impl.dv.dtd.DTDDVFactoryImpl;org.apache.xerces.impl.dv.ObjectFactory.newInstance;;;
Class.newInstance;org.apache.xerces.jaxp.DocumentBuilderFactoryImpl;javax.xml.parsers.FactoryFinder.newInstance;147;;
Class.newInstance;org.apache.xerces.parsers.XIncludeAwareParserConfiguration;org.apache.xerces.parsers.ObjectFactory.newInstance;;;
Class.newInstance;org.jaxen.saxpath.base.XPathReader;org.jaxen.saxpath.helpers.XPathReaderFactory.createReader;170;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor$HASHED$6fa76d2fd361585c5fe3433964828b14710d5895;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor$HASHED$bf67be7aa2fba0e0c4125f99f7ac27c22b632870;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor$HASHED$0fe886932b69b97b98f9625dd69006a3475e7188;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor$HASHED$121a7f6cb30af9bf05f2a64d37a9ea1013fd5cc0;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor$HASHED$8dc4c0adca50f3650707e512601212bcb28a5762;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor$HASHED$edc22611611f00c7930464fb47c0667b195ed66f;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.security.provider.SHA;java.security.Provider$Service.newInstance;1221;;
Class.newInstance;sun.security.provider.Sun;sun.security.jca.ProviderConfig$3.run;240;;
Class.newInstance;sun.text.resources.FormatData;java.util.ResourceBundle$Control.newBundle;2295;;
Class.newInstance;sun.text.resources.FormatData_en;java.util.ResourceBundle$Control.newBundle;2295;;
Class.newInstance;sun.text.resources.FormatData_en_US;java.util.ResourceBundle$Control.newBundle;2295;;
Class.newInstance;sun.util.resources.CurrencyNames;java.util.ResourceBundle$Control.newBundle;2295;;
Class.newInstance;sun.util.resources.CurrencyNames_en_US;java.util.ResourceBundle$Control.newBundle;2295;;
Constructor.getModifiers;<net.sourceforge.pmd.rules.DoubleCheckedLocking: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<net.sourceforge.pmd.rules.UnnecessaryConversionTemporary: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<net.sourceforge.pmd.rules.UselessOverridingMethod: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<net.sourceforge.pmd.rules.XPathRule: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<net.sourceforge.pmd.rules.XPathRule: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;30;isAccessible=true;
Constructor.getModifiers;<org.apache.xerces.impl.dv.dtd.DTDDVFactoryImpl: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xerces.jaxp.DocumentBuilderFactoryImpl: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xerces.parsers.XIncludeAwareParserConfiguration: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.jaxen.saxpath.base.XPathReader: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.jaxen.saxpath.base.XPathReader: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;30;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor$HASHED$6fa76d2fd361585c5fe3433964828b14710d5895: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor$HASHED$bf67be7aa2fba0e0c4125f99f7ac27c22b632870: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor$HASHED$0fe886932b69b97b98f9625dd69006a3475e7188: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor$HASHED$121a7f6cb30af9bf05f2a64d37a9ea1013fd5cc0: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor$HASHED$8dc4c0adca50f3650707e512601212bcb28a5762: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor$HASHED$edc22611611f00c7930464fb47c0667b195ed66f: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.security.provider.SHA: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.security.provider.Sun: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.text.resources.FormatData: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.text.resources.FormatData_en: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.text.resources.FormatData_en_US: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.util.resources.CurrencyNames: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.util.resources.CurrencyNames_en_US: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<dacapo.pmd.PmdHarness: void <init>(dacapo.parser.Config,java.io.File)>;dacapo.TestHarness.runBenchmark;270;isAccessible=false;
Constructor.newInstance;<net.sourceforge.pmd.rules.DoubleCheckedLocking: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<net.sourceforge.pmd.rules.UnnecessaryConversionTemporary: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<net.sourceforge.pmd.rules.UselessOverridingMethod: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<net.sourceforge.pmd.rules.XPathRule: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xerces.impl.dv.dtd.DTDDVFactoryImpl: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xerces.jaxp.DocumentBuilderFactoryImpl: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xerces.parsers.XIncludeAwareParserConfiguration: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.jaxen.saxpath.base.XPathReader: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor$HASHED$6fa76d2fd361585c5fe3433964828b14710d5895: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor$HASHED$bf67be7aa2fba0e0c4125f99f7ac27c22b632870: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor$HASHED$0fe886932b69b97b98f9625dd69006a3475e7188: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor$HASHED$121a7f6cb30af9bf05f2a64d37a9ea1013fd5cc0: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor$HASHED$8dc4c0adca50f3650707e512601212bcb28a5762: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor$HASHED$edc22611611f00c7930464fb47c0667b195ed66f: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.security.provider.SHA: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.security.provider.Sun: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.text.resources.FormatData: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.text.resources.FormatData_en: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.text.resources.FormatData_en_US: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.util.resources.CurrencyNames: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.util.resources.CurrencyNames_en_US: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Field.get*;<java.util.CurrencyData: int[] otherCurrenciesDFD>;java.util.Currency$1.run;136;isAccessible=false;
Field.get*;<java.util.CurrencyData: int[] scNewCurrenciesDFD>;java.util.Currency$1.run;134;isAccessible=false;
Field.get*;<java.util.CurrencyData: int[] scOldCurrenciesDFD>;java.util.Currency$1.run;133;isAccessible=false;
Field.get*;<java.util.CurrencyData: java.lang.String mainTable>;java.util.Currency$1.run;129;isAccessible=false;
Field.get*;<java.util.CurrencyData: java.lang.String otherCurrencies>;java.util.Currency$1.run;135;isAccessible=false;
Field.get*;<java.util.CurrencyData: java.lang.String[] scNewCurrencies>;java.util.Currency$1.run;132;isAccessible=false;
Field.get*;<java.util.CurrencyData: java.lang.String[] scOldCurrencies>;java.util.Currency$1.run;131;isAccessible=false;
Field.get*;<java.util.CurrencyData: long[] scCutOverTimes>;java.util.Currency$1.run;130;isAccessible=false;
Field.getDeclaringClass;<java.util.CurrencyData: int[] otherCurrenciesDFD>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;25;isAccessible=false;
Field.getDeclaringClass;<java.util.CurrencyData: int[] scNewCurrenciesDFD>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;25;isAccessible=false;
Field.getDeclaringClass;<java.util.CurrencyData: int[] scOldCurrenciesDFD>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;25;isAccessible=false;
Field.getDeclaringClass;<java.util.CurrencyData: java.lang.String mainTable>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;25;isAccessible=false;
Field.getDeclaringClass;<java.util.CurrencyData: java.lang.String otherCurrencies>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;25;isAccessible=false;
Field.getDeclaringClass;<java.util.CurrencyData: java.lang.String[] scNewCurrencies>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;25;isAccessible=false;
Field.getDeclaringClass;<java.util.CurrencyData: java.lang.String[] scOldCurrencies>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;25;isAccessible=false;
Field.getDeclaringClass;<java.util.CurrencyData: long[] scCutOverTimes>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;25;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: int[] otherCurrenciesDFD>;sun.misc.Unsafe.fieldOffset;551;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: int[] otherCurrenciesDFD>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;16;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: int[] otherCurrenciesDFD>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;17;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: int[] otherCurrenciesDFD>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;18;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: int[] otherCurrenciesDFD>;sun.reflect.UnsafeFieldAccessorImpl.<init>;31;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: int[] scNewCurrenciesDFD>;sun.misc.Unsafe.fieldOffset;551;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: int[] scNewCurrenciesDFD>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;16;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: int[] scNewCurrenciesDFD>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;17;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: int[] scNewCurrenciesDFD>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;18;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: int[] scNewCurrenciesDFD>;sun.reflect.UnsafeFieldAccessorImpl.<init>;31;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: int[] scOldCurrenciesDFD>;sun.misc.Unsafe.fieldOffset;551;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: int[] scOldCurrenciesDFD>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;16;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: int[] scOldCurrenciesDFD>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;17;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: int[] scOldCurrenciesDFD>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;18;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: int[] scOldCurrenciesDFD>;sun.reflect.UnsafeFieldAccessorImpl.<init>;31;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String mainTable>;sun.misc.Unsafe.fieldOffset;551;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String mainTable>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;16;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String mainTable>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;17;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String mainTable>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;18;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String mainTable>;sun.reflect.UnsafeFieldAccessorImpl.<init>;31;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String otherCurrencies>;sun.misc.Unsafe.fieldOffset;551;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String otherCurrencies>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;16;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String otherCurrencies>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;17;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String otherCurrencies>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;18;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String otherCurrencies>;sun.reflect.UnsafeFieldAccessorImpl.<init>;31;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String[] scNewCurrencies>;sun.misc.Unsafe.fieldOffset;551;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String[] scNewCurrencies>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;16;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String[] scNewCurrencies>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;17;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String[] scNewCurrencies>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;18;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String[] scNewCurrencies>;sun.reflect.UnsafeFieldAccessorImpl.<init>;31;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String[] scOldCurrencies>;sun.misc.Unsafe.fieldOffset;551;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String[] scOldCurrencies>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;16;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String[] scOldCurrencies>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;17;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String[] scOldCurrencies>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;18;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String[] scOldCurrencies>;sun.reflect.UnsafeFieldAccessorImpl.<init>;31;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: long[] scCutOverTimes>;sun.misc.Unsafe.fieldOffset;551;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: long[] scCutOverTimes>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;16;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: long[] scCutOverTimes>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;17;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: long[] scCutOverTimes>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;18;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: long[] scCutOverTimes>;sun.reflect.UnsafeFieldAccessorImpl.<init>;31;isAccessible=false;
Field.getName;<java.util.CurrencyData: int[] otherCurrenciesDFD>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.CurrencyData: int[] scNewCurrenciesDFD>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.CurrencyData: int[] scOldCurrenciesDFD>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.CurrencyData: java.lang.String mainTable>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.CurrencyData: java.lang.String otherCurrencies>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.CurrencyData: java.lang.String version>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.CurrencyData: java.lang.String[] scNewCurrencies>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.CurrencyData: java.lang.String[] scOldCurrencies>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.CurrencyData: long[] scCutOverTimes>;java.lang.Class.searchFields;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: boolean equals(java.lang.Object)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: int hashCode()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: java.lang.Class getClass()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: java.lang.String toString()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void notify()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void notifyAll()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait(long)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait(long,int)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.String: java.lang.String[] split(java.lang.String)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration: boolean isInterface()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration: boolean isNested()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration: java.lang.Object jjtAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration: void dump(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration: void setInterface()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTClassOrInterfaceType: java.lang.Object jjtAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTIfStatement: boolean hasElse()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTIfStatement: boolean hasElse()>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTIfStatement: java.lang.Object jjtAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTIfStatement: void dump(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTIfStatement: void setHasElse()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTInitializer: boolean isStatic()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTInitializer: java.lang.Object jjtAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTInitializer: void dump(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTInitializer: void setStatic()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTMethodDeclarator: int getParameterCount()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTMethodDeclarator: java.lang.Object jjtAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTName: java.lang.Object jjtAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTName: net.sourceforge.pmd.symboltable.NameDeclaration getNameDeclaration()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTName: void setNameDeclaration(net.sourceforge.pmd.symboltable.NameDeclaration)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTPrimarySuffix: boolean isArguments()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTPrimarySuffix: boolean isArrayDereference()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTPrimarySuffix: int getArgumentCount()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTPrimarySuffix: java.lang.Object jjtAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTPrimarySuffix: void dump(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTPrimarySuffix: void setIsArguments()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTPrimarySuffix: void setIsArrayDereference()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTResultType: boolean isVoid()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTResultType: boolean isVoid()>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTResultType: boolean returnsArray()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTResultType: java.lang.Object jjtAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTVariableDeclaratorId: boolean isArray()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTVariableDeclaratorId: boolean isExceptionBlockParameter()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTVariableDeclaratorId: int getArrayDepth()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTVariableDeclaratorId: java.lang.Object jjtAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTVariableDeclaratorId: java.util.List getUsages()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTVariableDeclaratorId: net.sourceforge.pmd.ast.ASTType getTypeNode()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTVariableDeclaratorId: net.sourceforge.pmd.ast.SimpleNode getTypeNameNode()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTVariableDeclaratorId: net.sourceforge.pmd.symboltable.VariableNameDeclaration getNameDeclaration()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTVariableDeclaratorId: void bumpArrayDepth()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTVariableDeclaratorId: void setNameDeclaration(net.sourceforge.pmd.symboltable.VariableNameDeclaration)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.AccessNode: boolean isAbstract()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.AccessNode: boolean isFinal()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.AccessNode: boolean isNative()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.AccessNode: boolean isPackagePrivate()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.AccessNode: boolean isPrivate()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.AccessNode: boolean isProtected()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.AccessNode: boolean isPublic()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.AccessNode: boolean isStatic()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.AccessNode: boolean isStrictfp()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.AccessNode: boolean isSynchronized()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.AccessNode: boolean isTransient()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.AccessNode: boolean isVolatile()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.AccessNode: java.lang.String collectDumpedModifiers(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.AccessNode: void setAbstract()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.AccessNode: void setFinal()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.AccessNode: void setModifiers(int)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.AccessNode: void setNative()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.AccessNode: void setPrivate()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.AccessNode: void setProtected()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.AccessNode: void setPublic()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.AccessNode: void setStatic()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.AccessNode: void setStrictfp()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.AccessNode: void setSynchronized()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.AccessNode: void setTransient()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.AccessNode: void setVolatile()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.JavaNode: java.lang.Object jjtAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.Node: int jjtGetNumChildren()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.Node: net.sourceforge.pmd.ast.Node jjtGetChild(int)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.Node: net.sourceforge.pmd.ast.Node jjtGetParent()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.Node: void jjtAddChild(net.sourceforge.pmd.ast.Node,int)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.Node: void jjtClose()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.Node: void jjtOpen()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.Node: void jjtSetParent(net.sourceforge.pmd.ast.Node)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaNode: java.lang.Object childrenAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaNode: java.lang.Object jjtAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaNode: java.lang.String toString()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaNode: void jjtClose()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaNode: void jjtOpen()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: boolean containsChildOfType(java.lang.Class)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: int getBeginColumn()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: int getBeginLine()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: int getEndColumn()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: int getEndLine()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: int jjtGetNumChildren()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: java.lang.String getImage()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: java.lang.String getImage()>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: java.lang.String toString(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: java.util.List findChildNodesWithXPath(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: java.util.List findChildrenOfType(java.lang.Class)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: java.util.List getParentsOfType(java.lang.Class)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: net.sourceforge.pmd.ast.Node getFirstChildOfType(java.lang.Class)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: net.sourceforge.pmd.ast.Node getFirstParentOfType(java.lang.Class)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: net.sourceforge.pmd.ast.Node getNthParent(int)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: net.sourceforge.pmd.ast.Node jjtGetChild(int)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: net.sourceforge.pmd.ast.Node jjtGetParent()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: net.sourceforge.pmd.dfa.IDataFlowNode getDataFlowNode()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: net.sourceforge.pmd.symboltable.Scope getScope()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: org.w3c.dom.Document asXml()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void discardIfNecessary()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void dump(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void findChildrenOfType(java.lang.Class,java.util.List)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void findChildrenOfType(java.lang.Class,java.util.List,boolean)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void jjtAddChild(net.sourceforge.pmd.ast.Node,int)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void jjtReplaceChild(net.sourceforge.pmd.ast.Node,net.sourceforge.pmd.ast.Node)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void jjtSetParent(net.sourceforge.pmd.ast.Node)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void setDataFlowNode(net.sourceforge.pmd.dfa.IDataFlowNode)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void setDiscardable()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void setImage(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void setScope(net.sourceforge.pmd.symboltable.Scope)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void setUnDiscardable()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void testingOnly__setBeginColumn(int)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void testingOnly__setBeginLine(int)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getModifiers;<java.lang.Object: boolean equals(java.lang.Object)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<java.lang.Object: int hashCode()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<java.lang.Object: java.lang.Class getClass()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<java.lang.Object: java.lang.String toString()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<java.lang.Object: void notify()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<java.lang.Object: void notifyAll()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<java.lang.Object: void wait()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<java.lang.Object: void wait(long)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<java.lang.Object: void wait(long,int)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<java.lang.String: java.lang.String[] split(java.lang.String)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.ASTIfStatement: boolean hasElse()>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.ASTResultType: boolean isVoid()>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.AccessNode: boolean isAbstract()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.AccessNode: boolean isFinal()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.AccessNode: boolean isNative()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.AccessNode: boolean isPackagePrivate()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.AccessNode: boolean isPrivate()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.AccessNode: boolean isProtected()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.AccessNode: boolean isPublic()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.AccessNode: boolean isStatic()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.AccessNode: boolean isStrictfp()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.AccessNode: boolean isSynchronized()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.AccessNode: boolean isTransient()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.AccessNode: boolean isVolatile()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.AccessNode: java.lang.String collectDumpedModifiers(java.lang.String)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.AccessNode: void setAbstract()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.AccessNode: void setFinal()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.AccessNode: void setModifiers(int)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.AccessNode: void setNative()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.AccessNode: void setPrivate()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.AccessNode: void setProtected()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.AccessNode: void setPublic()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.AccessNode: void setStatic()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.AccessNode: void setStrictfp()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.AccessNode: void setSynchronized()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.AccessNode: void setTransient()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.AccessNode: void setVolatile()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.Node: void jjtClose()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.Node: void jjtOpen()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleJavaNode: java.lang.Object childrenAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleJavaNode: java.lang.Object jjtAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleJavaNode: java.lang.String toString()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleJavaNode: void jjtClose()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleJavaNode: void jjtOpen()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: boolean containsChildOfType(java.lang.Class)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: int getBeginColumn()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: int getBeginLine()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: int getEndColumn()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: int getEndLine()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: int jjtGetNumChildren()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: java.lang.String getImage()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: java.lang.String getImage()>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: java.lang.String toString(java.lang.String)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: java.util.List findChildNodesWithXPath(java.lang.String)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: java.util.List findChildrenOfType(java.lang.Class)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: java.util.List getParentsOfType(java.lang.Class)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: net.sourceforge.pmd.ast.Node getFirstChildOfType(java.lang.Class)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: net.sourceforge.pmd.ast.Node getFirstParentOfType(java.lang.Class)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: net.sourceforge.pmd.ast.Node getNthParent(int)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: net.sourceforge.pmd.ast.Node jjtGetChild(int)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: net.sourceforge.pmd.ast.Node jjtGetParent()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: net.sourceforge.pmd.dfa.IDataFlowNode getDataFlowNode()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: net.sourceforge.pmd.symboltable.Scope getScope()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: org.w3c.dom.Document asXml()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: void discardIfNecessary()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: void dump(java.lang.String)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: void findChildrenOfType(java.lang.Class,java.util.List)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: void findChildrenOfType(java.lang.Class,java.util.List,boolean)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: void jjtAddChild(net.sourceforge.pmd.ast.Node,int)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: void jjtReplaceChild(net.sourceforge.pmd.ast.Node,net.sourceforge.pmd.ast.Node)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: void jjtSetParent(net.sourceforge.pmd.ast.Node)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: void setDataFlowNode(net.sourceforge.pmd.dfa.IDataFlowNode)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: void setDiscardable()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: void setImage(java.lang.String)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: void setScope(net.sourceforge.pmd.symboltable.Scope)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: void setUnDiscardable()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: void testingOnly__setBeginColumn(int)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<net.sourceforge.pmd.ast.SimpleNode: void testingOnly__setBeginLine(int)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getName;<java.lang.Object: boolean equals(java.lang.Object)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<java.lang.Object: boolean equals(java.lang.Object)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<java.lang.Object: int hashCode()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<java.lang.Object: int hashCode()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<java.lang.Object: int hashCode()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator.isAttribute;93;isAccessible=false;
Method.getName;<java.lang.Object: java.lang.Class getClass()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<java.lang.Object: java.lang.String toString()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<java.lang.Object: java.lang.String toString()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<java.lang.Object: void notify()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<java.lang.Object: void notify()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<java.lang.Object: void notifyAll()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<java.lang.Object: void notifyAll()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<java.lang.Object: void wait()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<java.lang.Object: void wait()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<java.lang.Object: void wait(long)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<java.lang.Object: void wait(long)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<java.lang.Object: void wait(long,int)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<java.lang.Object: void wait(long,int)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<java.lang.String: boolean contains(java.lang.CharSequence)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: boolean contentEquals(java.lang.CharSequence)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: boolean contentEquals(java.lang.StringBuffer)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: boolean endsWith(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: boolean equals(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: boolean isEmpty()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: boolean matches(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: boolean startsWith(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: boolean startsWith(java.lang.String,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: byte[] getBytes()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: byte[] getBytes(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: char charAt(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: char[] toCharArray()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: int codePointAt(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: int codePointBefore(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: int codePointCount(int,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: int compareTo(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: int compareTo(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: int compareToIgnoreCase(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: int hashCode()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: int indexOf(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: int indexOf(int,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: int indexOf(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: int indexOf(java.lang.String,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: int lastIndexOf(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: int lastIndexOf(int,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: int lastIndexOf(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: int lastIndexOf(java.lang.String,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: int length()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: int offsetByCodePoints(int,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: java.lang.CharSequence subSequence(int,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: java.lang.String concat(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: java.lang.String copyValueOf(char[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: java.lang.String copyValueOf(char[],int,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: java.lang.String intern()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: java.lang.String replace(char,char)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: java.lang.String substring(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: java.lang.String substring(int,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: java.lang.String toLowerCase()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: java.lang.String toString()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: java.lang.String toUpperCase()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: java.lang.String trim()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: java.lang.String valueOf(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: java.lang.String valueOf(char)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: java.lang.String valueOf(char[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: java.lang.String valueOf(char[],int,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: java.lang.String valueOf(double)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: java.lang.String valueOf(float)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: java.lang.String valueOf(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: java.lang.String valueOf(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: java.lang.String valueOf(long)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: java.lang.String[] split(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: java.lang.String[] split(java.lang.String)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getName;<java.lang.String: java.lang.String[] split(java.lang.String,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: void getBytes(int,int,byte[],int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.String: void getChars(int,int,char[],int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration: boolean isInterface()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration: boolean isInterface()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator$MethodWrapper.<init>;23;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration: boolean isInterface()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator.isAttribute;93;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration: boolean isNested()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration: boolean isNested()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator$MethodWrapper.<init>;23;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration: boolean isNested()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator.isAttribute;93;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration: java.lang.Object jjtAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration: void dump(java.lang.String)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration: void setInterface()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTClassOrInterfaceType: java.lang.Object jjtAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTIfStatement: boolean hasElse()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTIfStatement: boolean hasElse()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator$MethodWrapper.<init>;23;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTIfStatement: boolean hasElse()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator.isAttribute;93;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTIfStatement: boolean hasElse()>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTIfStatement: java.lang.Object jjtAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTIfStatement: void dump(java.lang.String)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTIfStatement: void setHasElse()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTInitializer: boolean isStatic()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTInitializer: boolean isStatic()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator$MethodWrapper.<init>;23;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTInitializer: boolean isStatic()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator.isAttribute;93;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTInitializer: java.lang.Object jjtAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTInitializer: void dump(java.lang.String)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTInitializer: void setStatic()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTMethodDeclarator: int getParameterCount()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTMethodDeclarator: int getParameterCount()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator$MethodWrapper.<init>;23;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTMethodDeclarator: int getParameterCount()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator.isAttribute;93;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTMethodDeclarator: java.lang.Object jjtAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTName: java.lang.Object jjtAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTName: void setNameDeclaration(net.sourceforge.pmd.symboltable.NameDeclaration)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTPrimarySuffix: boolean isArguments()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTPrimarySuffix: boolean isArguments()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator$MethodWrapper.<init>;23;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTPrimarySuffix: boolean isArguments()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator.isAttribute;93;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTPrimarySuffix: boolean isArrayDereference()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTPrimarySuffix: boolean isArrayDereference()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator$MethodWrapper.<init>;23;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTPrimarySuffix: boolean isArrayDereference()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator.isAttribute;93;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTPrimarySuffix: int getArgumentCount()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTPrimarySuffix: int getArgumentCount()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator$MethodWrapper.<init>;23;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTPrimarySuffix: int getArgumentCount()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator.isAttribute;93;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTPrimarySuffix: java.lang.Object jjtAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTPrimarySuffix: void dump(java.lang.String)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTPrimarySuffix: void setIsArguments()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTPrimarySuffix: void setIsArrayDereference()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTResultType: boolean isVoid()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTResultType: boolean isVoid()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator$MethodWrapper.<init>;23;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTResultType: boolean isVoid()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator.isAttribute;93;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTResultType: boolean isVoid()>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTResultType: boolean returnsArray()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTResultType: boolean returnsArray()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator$MethodWrapper.<init>;23;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTResultType: boolean returnsArray()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator.isAttribute;93;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTResultType: java.lang.Object jjtAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTVariableDeclaratorId: boolean isArray()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTVariableDeclaratorId: boolean isArray()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator$MethodWrapper.<init>;23;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTVariableDeclaratorId: boolean isArray()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator.isAttribute;93;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTVariableDeclaratorId: boolean isExceptionBlockParameter()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTVariableDeclaratorId: boolean isExceptionBlockParameter()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator$MethodWrapper.<init>;23;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTVariableDeclaratorId: boolean isExceptionBlockParameter()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator.isAttribute;93;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTVariableDeclaratorId: int getArrayDepth()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTVariableDeclaratorId: int getArrayDepth()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator$MethodWrapper.<init>;23;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTVariableDeclaratorId: int getArrayDepth()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator.isAttribute;93;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTVariableDeclaratorId: java.lang.Object jjtAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTVariableDeclaratorId: java.util.List getUsages()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTVariableDeclaratorId: void bumpArrayDepth()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.ASTVariableDeclaratorId: void setNameDeclaration(net.sourceforge.pmd.symboltable.VariableNameDeclaration)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isAbstract()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isAbstract()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isAbstract()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator$MethodWrapper.<init>;23;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isAbstract()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator.isAttribute;93;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isFinal()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isFinal()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isFinal()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator$MethodWrapper.<init>;23;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isFinal()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator.isAttribute;93;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isNative()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isNative()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isNative()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator$MethodWrapper.<init>;23;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isNative()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator.isAttribute;93;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isPackagePrivate()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isPackagePrivate()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isPackagePrivate()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator$MethodWrapper.<init>;23;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isPackagePrivate()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator.isAttribute;93;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isPrivate()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isPrivate()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isPrivate()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator$MethodWrapper.<init>;23;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isPrivate()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator.isAttribute;93;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isProtected()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isProtected()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isProtected()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator$MethodWrapper.<init>;23;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isProtected()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator.isAttribute;93;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isPublic()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isPublic()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isPublic()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator$MethodWrapper.<init>;23;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isPublic()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator.isAttribute;93;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isStatic()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isStatic()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isStatic()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator$MethodWrapper.<init>;23;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isStatic()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator.isAttribute;93;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isStrictfp()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isStrictfp()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isStrictfp()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator$MethodWrapper.<init>;23;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isStrictfp()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator.isAttribute;93;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isSynchronized()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isSynchronized()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isSynchronized()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator$MethodWrapper.<init>;23;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isSynchronized()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator.isAttribute;93;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isTransient()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isTransient()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isTransient()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator$MethodWrapper.<init>;23;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isTransient()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator.isAttribute;93;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isVolatile()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isVolatile()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isVolatile()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator$MethodWrapper.<init>;23;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: boolean isVolatile()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator.isAttribute;93;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: java.lang.String collectDumpedModifiers(java.lang.String)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: java.lang.String collectDumpedModifiers(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: void setAbstract()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: void setAbstract()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: void setFinal()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: void setFinal()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: void setModifiers(int)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: void setModifiers(int)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: void setNative()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: void setNative()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: void setPrivate()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: void setPrivate()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: void setProtected()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: void setProtected()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: void setPublic()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: void setPublic()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: void setStatic()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: void setStatic()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: void setStrictfp()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: void setStrictfp()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: void setSynchronized()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: void setSynchronized()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: void setTransient()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: void setTransient()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: void setVolatile()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.AccessNode: void setVolatile()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.JavaNode: java.lang.Object jjtAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.Node: int jjtGetNumChildren()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.Node: int jjtGetNumChildren()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.Node: net.sourceforge.pmd.ast.Node jjtGetChild(int)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.Node: net.sourceforge.pmd.ast.Node jjtGetChild(int)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.Node: net.sourceforge.pmd.ast.Node jjtGetParent()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.Node: net.sourceforge.pmd.ast.Node jjtGetParent()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.Node: void jjtAddChild(net.sourceforge.pmd.ast.Node,int)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.Node: void jjtAddChild(net.sourceforge.pmd.ast.Node,int)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.Node: void jjtClose()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.Node: void jjtClose()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.Node: void jjtOpen()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.Node: void jjtOpen()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.Node: void jjtSetParent(net.sourceforge.pmd.ast.Node)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.Node: void jjtSetParent(net.sourceforge.pmd.ast.Node)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleJavaNode: java.lang.Object childrenAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleJavaNode: java.lang.Object childrenAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleJavaNode: java.lang.Object jjtAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleJavaNode: java.lang.Object jjtAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleJavaNode: java.lang.String toString()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleJavaNode: java.lang.String toString()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleJavaNode: java.lang.String toString()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator.isAttribute;93;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleJavaNode: void jjtClose()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleJavaNode: void jjtClose()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleJavaNode: void jjtOpen()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleJavaNode: void jjtOpen()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: boolean containsChildOfType(java.lang.Class)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: boolean containsChildOfType(java.lang.Class)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: int getBeginColumn()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: int getBeginColumn()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: int getBeginColumn()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator$MethodWrapper.<init>;23;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: int getBeginColumn()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator.isAttribute;93;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: int getBeginLine()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: int getBeginLine()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: int getBeginLine()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator$MethodWrapper.<init>;23;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: int getBeginLine()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator.isAttribute;93;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: int getEndColumn()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: int getEndColumn()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: int getEndColumn()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator$MethodWrapper.<init>;23;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: int getEndColumn()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator.isAttribute;93;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: int getEndLine()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: int getEndLine()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: int getEndLine()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator$MethodWrapper.<init>;23;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: int getEndLine()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator.isAttribute;93;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: int jjtGetNumChildren()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: int jjtGetNumChildren()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: int jjtGetNumChildren()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator.isAttribute;93;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: java.lang.String getImage()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: java.lang.String getImage()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: java.lang.String getImage()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator$MethodWrapper.<init>;23;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: java.lang.String getImage()>;net.sourceforge.pmd.jaxen.AttributeAxisIterator.isAttribute;93;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: java.lang.String getImage()>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: java.lang.String toString(java.lang.String)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: java.lang.String toString(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: java.util.List findChildNodesWithXPath(java.lang.String)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: java.util.List findChildNodesWithXPath(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: java.util.List findChildrenOfType(java.lang.Class)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: java.util.List findChildrenOfType(java.lang.Class)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: java.util.List getParentsOfType(java.lang.Class)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: java.util.List getParentsOfType(java.lang.Class)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: net.sourceforge.pmd.ast.Node getFirstChildOfType(java.lang.Class)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: net.sourceforge.pmd.ast.Node getFirstParentOfType(java.lang.Class)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: net.sourceforge.pmd.ast.Node getNthParent(int)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: net.sourceforge.pmd.ast.Node jjtGetChild(int)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: net.sourceforge.pmd.ast.Node jjtGetChild(int)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: net.sourceforge.pmd.ast.Node jjtGetParent()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: net.sourceforge.pmd.ast.Node jjtGetParent()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: net.sourceforge.pmd.dfa.IDataFlowNode getDataFlowNode()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: net.sourceforge.pmd.symboltable.Scope getScope()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: org.w3c.dom.Document asXml()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: void discardIfNecessary()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: void discardIfNecessary()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: void dump(java.lang.String)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: void dump(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: void findChildrenOfType(java.lang.Class,java.util.List)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: void findChildrenOfType(java.lang.Class,java.util.List)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: void findChildrenOfType(java.lang.Class,java.util.List,boolean)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: void findChildrenOfType(java.lang.Class,java.util.List,boolean)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: void jjtAddChild(net.sourceforge.pmd.ast.Node,int)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: void jjtAddChild(net.sourceforge.pmd.ast.Node,int)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: void jjtReplaceChild(net.sourceforge.pmd.ast.Node,net.sourceforge.pmd.ast.Node)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: void jjtReplaceChild(net.sourceforge.pmd.ast.Node,net.sourceforge.pmd.ast.Node)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: void jjtSetParent(net.sourceforge.pmd.ast.Node)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: void jjtSetParent(net.sourceforge.pmd.ast.Node)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: void setDataFlowNode(net.sourceforge.pmd.dfa.IDataFlowNode)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: void setDataFlowNode(net.sourceforge.pmd.dfa.IDataFlowNode)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: void setDiscardable()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: void setDiscardable()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: void setImage(java.lang.String)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: void setImage(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: void setScope(net.sourceforge.pmd.symboltable.Scope)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: void setScope(net.sourceforge.pmd.symboltable.Scope)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: void setUnDiscardable()>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: void setUnDiscardable()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: void testingOnly__setBeginColumn(int)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: void testingOnly__setBeginColumn(int)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: void testingOnly__setBeginLine(int)>;java.lang.Class$MethodArray.removeByNameAndSignature;2496;isAccessible=false;
Method.getName;<net.sourceforge.pmd.ast.SimpleNode: void testingOnly__setBeginLine(int)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.invoke;<java.lang.String: java.lang.String[] split(java.lang.String)>;net.sourceforge.pmd.dfa.report.ReportTree.addRuleViolation;125;isAccessible=false;
Method.invoke;<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration: boolean isInterface()>;net.sourceforge.pmd.jaxen.Attribute.getValue;30;isAccessible=false;
Method.invoke;<net.sourceforge.pmd.ast.ASTIfStatement: boolean hasElse()>;net.sourceforge.pmd.jaxen.Attribute.getValue;30;isAccessible=false;
Method.invoke;<net.sourceforge.pmd.ast.ASTInitializer: boolean isStatic()>;net.sourceforge.pmd.jaxen.Attribute.getValue;30;isAccessible=false;
Method.invoke;<net.sourceforge.pmd.ast.ASTResultType: boolean isVoid()>;net.sourceforge.pmd.jaxen.Attribute.getValue;30;isAccessible=false;
Method.invoke;<net.sourceforge.pmd.ast.AccessNode: boolean isFinal()>;net.sourceforge.pmd.jaxen.Attribute.getValue;30;isAccessible=false;
Method.invoke;<net.sourceforge.pmd.ast.SimpleNode: java.lang.String getImage()>;net.sourceforge.pmd.jaxen.Attribute.getValue;30;isAccessible=false;
